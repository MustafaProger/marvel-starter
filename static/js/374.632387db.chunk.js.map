{"version":3,"file":"static/js/374.632387db.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComisPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n\treturn (\n\t\t// eslint-disable-next-line jsx-a11y/alt-text\n\t\t<img\n\t\t\tstyle={{\n\t\t\t\tdisplay: \"block\",\n\t\t\t\twidth: 250,\n\t\t\t\theight: 250,\n\t\t\t\tobjectFit: \"contain\",\n\t\t\t\tmargin: \"0 auto\",\n\t\t\t}}\n\t\t\tsrc={img}\n\t\t/>\n\t);\n};\n\nexport default ErrorMessage;\n","import { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./SingleComisPage.scss\";\n\nconst SingleComisPage = () => {\n\tconst { comicId } = useParams();\n\tconst { loading, error, getComicById, clearError } = useMarvelService();\n\n\tconst [comic, setComic] = useState(null);\n\n\tuseEffect(() => {\n\t\tupdateComic();\n\t}, [comicId]);\n\n\tconst updateComic = () => {\n\t\tclearError();\n\t\tgetComicById(comicId).then(onComicLoaded);\n\t};\n\n\tconst onComicLoaded = (char) => {\n\t\tsetComic((prevChar) => char);\n\t};\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(loading || error || !comic) ? <View comic={comic} /> : null;\n\n\treturn (\n\t\t<>\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t</>\n\t);\n};\n\nconst View = ({ comic }) => {\n\tconst { title, description, pageCount, thumbnail, language, price } = comic;\n\n\treturn (\n\t\t<div className='single-comic'>\n\t\t\t<img\n\t\t\t\tsrc={thumbnail}\n\t\t\t\talt={title}\n\t\t\t\tclassName='single-comic__img'\n\t\t\t/>\n\t\t\t<div className='single-comic__info'>\n\t\t\t\t<h2 className='single-comic__name'>{title}</h2>\n\t\t\t\t<p className='single-comic__descr'>{description}</p>\n\t\t\t\t<p className='single-comic__descr'>{pageCount}</p>\n\t\t\t\t<p className='single-comic__descr'>{language}</p>\n\t\t\t\t<div className='single-comic__price'>{price}</div>\n\t\t\t</div>\n\t\t\t<Link\n\t\t\t\tto='/comics'\n\t\t\t\tclassName='single-comic__back'>\n\t\t\t\t‚Üê Back to all\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nexport default SingleComisPage;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [error, setError] = useState(null);\n\n\tconst request = useCallback(\n\t\tasync (\n\t\t\turl,\n\t\t\tmethod = \"GET\",\n\t\t\tbody = null,\n\t\t\theaders = { \"Content-Type\": \"application/json\" }\n\t\t) => {\n\t\t\tsetLoading(true);\n\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(url, { method, body, headers });\n\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\n\t\t\t\t}\n\n\t\t\t\tconst data = await response.json();\n\n\t\t\t\tsetLoading(false);\n\t\t\t\treturn data;\n\t\t\t} catch (e) {\n\t\t\t\tsetLoading(false);\n\t\t\t\tsetError(e.message);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t},\n\t\t[]\n\t);\n\n\tconst clearError = useCallback(() => setError(null), []);\n\n\treturn { loading, request, error, clearError };\n};\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\tconst _apiKey = \"apikey=58a1c7f15ef58395ab52a6c63927a461\";\n\tconst _ts = \"ts=1738563207400\";\n\tconst _hash = \"hash=d5ecccf7ee705be62d227e32dc2a3a47\";\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacterById = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = _baseOffset) => {\n\t\tconst data = await request(\n\t\t\t`${_apiBase}/comics?${_ts}&${_apiKey}&${_hash}&offset=${offset}&limit=8`\n\t\t);\n\t\treturn data.data.results;\n\t\t// return data.data.results.map(_transformComics);\n\t};\n\n\tconst getComicById = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription:\n\t\t\t\tchar.description !== \"\"\n\t\t\t\t\t? char.description.length > 182\n\t\t\t\t\t\t? char.description.slice(0, 182) + \"...\"\n\t\t\t\t\t\t: char.description\n\t\t\t\t\t: char.description + \"The character has no description\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} page`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tgetAllCharacters,\n\t\tgetCharacterById,\n\t\tgetAllComics,\n\t\tgetComicById,\n\t\tclearError,\n\t};\n};\n\nexport default useMarvelService;\n"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","alt","Link","to","SingleComisPage","comicId","useParams","loading","error","getComicById","clearError","useMarvelService","setComic","useState","useEffect","updateComic","then","onComicLoaded","char","prevChar","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","id","name","slice","path","extension","homepage","urls","wiki","comics","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacterById","res","getAllComics"],"sourceRoot":""}